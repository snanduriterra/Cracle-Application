/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PickerIOS
 *
 * This is a controlled component version of RCTPickerIOS
 */
'use strict';var _class,_temp;

var NativeMethodsMixin=require("NativeMethodsMixin");
var React=require("React");
var PropTypes=require("prop-types");
var StyleSheet=require("StyleSheet");
var StyleSheetPropType=require("StyleSheetPropType");
var TextStylePropTypes=require("TextStylePropTypes");
var View=require("View");
var ViewPropTypes=require("ViewPropTypes");
var processColor=require("processColor");

var createReactClass=require("create-react-class");
var itemStylePropType=StyleSheetPropType(TextStylePropTypes);
var requireNativeComponent=require("requireNativeComponent");

var PickerIOS=createReactClass({
displayName:'PickerIOS',
mixins:[NativeMethodsMixin],

propTypes:babelHelpers.extends({},
ViewPropTypes,{
itemStyle:itemStylePropType,
onValueChange:PropTypes.func,
selectedValue:PropTypes.any// string or integer basically
}),

getInitialState:function getInitialState(){
return this._stateFromProps(this.props);
},

componentWillReceiveProps:function componentWillReceiveProps(nextProps){
this.setState(this._stateFromProps(nextProps));
},

// Translate PickerIOS prop and children into stuff that RCTPickerIOS understands.
_stateFromProps:function _stateFromProps(props){
var selectedIndex=0;
var items=[];
React.Children.toArray(props.children).forEach(function(child,index){
if(child.props.value===props.selectedValue){
selectedIndex=index;
}
items.push({
value:child.props.value,
label:child.props.label,
textColor:processColor(child.props.color)});

});
return{selectedIndex:selectedIndex,items:items};
},

render:function render(){var _this=this;
return(
React.createElement(View,{style:this.props.style},
React.createElement(RCTPickerIOS,{
ref:function ref(picker){return _this._picker=picker;},
style:[styles.pickerIOS,this.props.itemStyle],
items:this.state.items,
selectedIndex:this.state.selectedIndex,
onChange:this._onChange,
onStartShouldSetResponder:function onStartShouldSetResponder(){return true;},
onResponderTerminationRequest:function onResponderTerminationRequest(){return false;}})));



},

_onChange:function _onChange(event){
if(this.props.onChange){
this.props.onChange(event);
}
if(this.props.onValueChange){
this.props.onValueChange(event.nativeEvent.newValue,event.nativeEvent.newIndex);
}

// The picker is a controlled component. This means we expect the
// on*Change handlers to be in charge of updating our
// `selectedValue` prop. That way they can also
// disallow/undo/mutate the selection of certain values. In other
// words, the embedder of this component should be the source of
// truth, not the native component.
if(this._picker&&this.state.selectedIndex!==event.nativeEvent.newIndex){
this._picker.setNativeProps({
selectedIndex:this.state.selectedIndex});

}
}});


PickerIOS.Item=(_temp=_class=function(_React$Component){babelHelpers.inherits(_class,_React$Component);function _class(){babelHelpers.classCallCheck(this,_class);return babelHelpers.possibleConstructorReturn(this,(_class.__proto__||Object.getPrototypeOf(_class)).apply(this,arguments));}babelHelpers.createClass(_class,[{key:"render",value:function render()






{
// These items don't get rendered directly.
return null;
}}]);return _class;}(React.Component),_class.propTypes={value:PropTypes.any,// string or integer basically
label:PropTypes.string,color:PropTypes.string},_temp);

var styles=StyleSheet.create({
pickerIOS:{
// The picker will conform to whatever width is given, but we do
// have to set the component's height explicitly on the
// surrounding view to ensure it gets rendered.
height:216}});



var RCTPickerIOS=requireNativeComponent('RCTPicker',{
propTypes:{
style:itemStylePropType}},

{
nativeOnly:{
items:true,
onChange:true,
selectedIndex:true}});



module.exports=PickerIOS;