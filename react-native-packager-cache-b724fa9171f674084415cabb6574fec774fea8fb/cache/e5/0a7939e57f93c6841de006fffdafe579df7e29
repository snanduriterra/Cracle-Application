/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule JSTimers
 * 
 */
'use strict';

// Note that the module JSTimers is split into two in order to solve a cycle
// in dependencies. NativeModules > BatchedBridge > MessageQueue > JSTimersExecution
var JSTimersExecution=require("JSTimersExecution");
var Platform=require("Platform");var _require=

require("NativeModules"),Timing=_require.Timing;
var performanceNow=require("fbjs/lib/performanceNow");



// Returns a free index if one is available, and the next consecutive index otherwise.
function _getFreeIndex(){
var freeIndex=JSTimersExecution.timerIDs.indexOf(null);
if(freeIndex===-1){
freeIndex=JSTimersExecution.timerIDs.length;
}
return freeIndex;
}

function _allocateCallback(func,type){
var id=JSTimersExecution.GUID++;
var freeIndex=_getFreeIndex();
JSTimersExecution.timerIDs[freeIndex]=id;
JSTimersExecution.callbacks[freeIndex]=func;
JSTimersExecution.types[freeIndex]=type;









return id;
}

function _freeCallback(timerID){
// JSTimersExecution.timerIDs contains nulls after timers have been removed;
// ignore nulls upfront so indexOf doesn't find them
if(timerID==null){
return;
}

var index=JSTimersExecution.timerIDs.indexOf(timerID);
// See corresponding comment in `callTimers` for reasoning behind this
if(index!==-1){
JSTimersExecution._clearIndex(index);
var type=JSTimersExecution.types[index];
if(type!=='setImmediate'&&type!=='requestIdleCallback'){
Timing.deleteTimer(timerID);
}
}
}

var MAX_TIMER_DURATION_MS=60000;
var IS_ANDROID=true;
var ANDROID_LONG_TIMER_MESSAGE="Setting a timer for a long period of time, i.e. multiple minutes, is a performance and correctness issue on Android as it keeps the timer module awake, and timers can only be called when the app is in the foreground. See https://github.com/facebook/react-native/issues/12981 for more info.";





/**
 * JS implementation of timer functions. Must be completely driven by an
 * external clock signal, all that's stored here is timerID, timer type, and
 * callback.
 */
var JSTimers={
/**
   * @param {function} func Callback to be invoked after `duration` ms.
   * @param {number} duration Number of milliseconds.
   */
setTimeout:function setTimeout(func,duration){for(var _len=arguments.length,args=Array(_len>2?_len-2:0),_key=2;_key<_len;_key++){args[_key-2]=arguments[_key];}





var id=_allocateCallback(function(){return func.apply(undefined,args);},'setTimeout');
Timing.createTimer(id,duration||0,Date.now(),/* recurring */false);
return id;
},

/**
   * @param {function} func Callback to be invoked every `duration` ms.
   * @param {number} duration Number of milliseconds.
   */
setInterval:function setInterval(func,duration){for(var _len2=arguments.length,args=Array(_len2>2?_len2-2:0),_key2=2;_key2<_len2;_key2++){args[_key2-2]=arguments[_key2];}





var id=_allocateCallback(function(){return func.apply(undefined,args);},'setInterval');
Timing.createTimer(id,duration||0,Date.now(),/* recurring */true);
return id;
},

/**
   * @param {function} func Callback to be invoked before the end of the
   * current JavaScript execution loop.
   */
setImmediate:function setImmediate(func){for(var _len3=arguments.length,args=Array(_len3>1?_len3-1:0),_key3=1;_key3<_len3;_key3++){args[_key3-1]=arguments[_key3];}
var id=_allocateCallback(function(){return func.apply(undefined,args);},'setImmediate');
JSTimersExecution.immediates.push(id);
return id;
},

/**
   * @param {function} func Callback to be invoked every frame.
   */
requestAnimationFrame:function requestAnimationFrame(func){
var id=_allocateCallback(func,'requestAnimationFrame');
Timing.createTimer(id,1,Date.now(),/* recurring */false);
return id;
},

/**
   * @param {function} func Callback to be invoked every frame and provided
   * with time remaining in frame.
   * @param {?object} options
   */
requestIdleCallback:function requestIdleCallback(func,options){
if(JSTimersExecution.requestIdleCallbacks.length===0){
Timing.setSendIdleEvents(true);
}

var timeout=options&&options.timeout;
var id=_allocateCallback(
timeout!=null?
function(deadline){
var timeoutId=JSTimersExecution.requestIdleCallbackTimeouts.get(id);
if(timeoutId){
JSTimers.clearTimeout(timeoutId);
JSTimersExecution.requestIdleCallbackTimeouts.delete(id);
}
return func(deadline);
}:
func,
'requestIdleCallback');

JSTimersExecution.requestIdleCallbacks.push(id);

if(timeout!=null){
var timeoutId=JSTimers.setTimeout(function(){
var index=JSTimersExecution.requestIdleCallbacks.indexOf(id);
if(index>-1){
JSTimersExecution.requestIdleCallbacks.splice(index,1);
JSTimersExecution.callTimer(id,performanceNow(),true);
}
JSTimersExecution.requestIdleCallbackTimeouts.delete(id);
if(JSTimersExecution.requestIdleCallbacks.length===0){
Timing.setSendIdleEvents(false);
}
},timeout);
JSTimersExecution.requestIdleCallbackTimeouts.set(id,timeoutId);
}
return id;
},

cancelIdleCallback:function cancelIdleCallback(timerID){
_freeCallback(timerID);
var index=JSTimersExecution.requestIdleCallbacks.indexOf(timerID);
if(index!==-1){
JSTimersExecution.requestIdleCallbacks.splice(index,1);
}

var timeoutId=JSTimersExecution.requestIdleCallbackTimeouts.get(timerID);
if(timeoutId){
JSTimers.clearTimeout(timeoutId);
JSTimersExecution.requestIdleCallbackTimeouts.delete(timerID);
}

if(JSTimersExecution.requestIdleCallbacks.length===0){
Timing.setSendIdleEvents(false);
}
},

clearTimeout:function clearTimeout(timerID){
_freeCallback(timerID);
},

clearInterval:function clearInterval(timerID){
_freeCallback(timerID);
},

clearImmediate:function clearImmediate(timerID){
_freeCallback(timerID);
var index=JSTimersExecution.immediates.indexOf(timerID);
if(index!==-1){
JSTimersExecution.immediates.splice(index,1);
}
},

cancelAnimationFrame:function cancelAnimationFrame(timerID){
_freeCallback(timerID);
}};


module.exports=JSTimers;