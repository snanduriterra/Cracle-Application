/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @polyfill
 * 
 */

'use strict';





































global.require=_require;
global.__d=define;

var modules=Object.create(null);




function define(
factory,
moduleId,
dependencyMap)
{
if(moduleId in modules){
// prevent repeated calls to `global.nativeRequire` to overwrite modules
// that are already loaded
return;
}
modules[moduleId]={
dependencyMap:dependencyMap,
exports:undefined,
factory:factory,
hasError:false,
isInitialized:false};














}

function _require(moduleId){













//$FlowFixMe: at this point we know that moduleId is a number
var moduleIdReallyIsNumber=moduleId;
var module=modules[moduleIdReallyIsNumber];
return module&&module.isInitialized?
module.exports:
guardedLoadModule(moduleIdReallyIsNumber,module);
}

var inGuard=false;
function guardedLoadModule(moduleId,module){
if(!inGuard&&global.ErrorUtils){
inGuard=true;
var returnValue=void 0;
try{
returnValue=loadModuleImplementation(moduleId,module);
}catch(e){
global.ErrorUtils.reportFatalError(e);
}
inGuard=false;
return returnValue;
}else{
return loadModuleImplementation(moduleId,module);
}
}

function loadModuleImplementation(moduleId,module){
var nativeRequire=global.nativeRequire;
if(!module&&nativeRequire){
nativeRequire(moduleId);
module=modules[moduleId];
}

if(!module){
throw unknownModuleError(moduleId);
}

if(module.hasError){
throw moduleThrewError(moduleId,module.error);
}

// `require` calls int  the require polyfill itself are not analyzed and
// replaced so that they use numeric module IDs.
// The systrace module will expose itself on the require function so that
// it can be used here.
// TODO(davidaurelio) Scan polyfills for dependencies, too (t9759686)




// We must optimistically mark module as initialized before running the
// factory to keep any require cycles inside the factory from causing an
// infinite require loop.
module.isInitialized=true;
var exports=module.exports={};var _module=
module;var factory=_module.factory,dependencyMap=_module.dependencyMap;
try{





var moduleObject={exports:exports};




// keep args in sync with with defineModuleCode in
// packager/src//Resolver/index.js
// and packager/src//ModuleGraph/worker.js
factory(global,_require,moduleObject,exports,dependencyMap);

// avoid removing factory in DEV mode as it breaks HMR
{
// $FlowFixMe: This is only sound because we never access `factory` again
module.factory=undefined;
module.dependencyMap=undefined;
}





return module.exports=moduleObject.exports;
}catch(e){
module.hasError=true;
module.error=e;
module.isInitialized=false;
module.exports=undefined;
throw e;
}
}

function unknownModuleError(id){
var message='Requiring unknown module "'+id+'".';





return Error(message);
}

function moduleThrewError(id,error){
var displayName=id;
return Error('Requiring module "'+displayName+'", which threw an exception: '+error);
}