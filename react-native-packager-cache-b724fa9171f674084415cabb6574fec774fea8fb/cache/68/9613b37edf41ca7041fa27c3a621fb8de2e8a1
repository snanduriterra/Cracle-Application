/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule TabBarItemIOS
 * @noflow
 */
'use strict';var _class,_temp2;

var ColorPropType=require("ColorPropType");
var Image=require("Image");
var React=require("React");
var PropTypes=require("prop-types");
var StaticContainer=require("StaticContainer.react");
var StyleSheet=require("StyleSheet");
var View=require("View");

var ViewPropTypes=require("ViewPropTypes");

var requireNativeComponent=require("requireNativeComponent");var

TabBarItemIOS=(_temp2=_class=function(_React$Component){babelHelpers.inherits(TabBarItemIOS,_React$Component);function TabBarItemIOS(){var _ref;var _temp,_this,_ret;babelHelpers.classCallCheck(this,TabBarItemIOS);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=babelHelpers.possibleConstructorReturn(this,(_ref=TabBarItemIOS.__proto__||Object.getPrototypeOf(TabBarItemIOS)).call.apply(_ref,[this].concat(args))),_this),_this.










































































state={
hasBeenSelected:false},_temp),babelHelpers.possibleConstructorReturn(_this,_ret);}babelHelpers.createClass(TabBarItemIOS,[{key:"componentWillMount",value:function componentWillMount()


{
if(this.props.selected){
this.setState({hasBeenSelected:true});
}
}},{key:"componentWillReceiveProps",value:function componentWillReceiveProps(

nextProps){
if(this.state.hasBeenSelected||nextProps.selected){
this.setState({hasBeenSelected:true});
}
}},{key:"render",value:function render()

{var _props=
this.props,style=_props.style,children=_props.children,props=babelHelpers.objectWithoutProperties(_props,["style","children"]);

// if the tab has already been shown once, always continue to show it so we
// preserve state between tab transitions
if(this.state.hasBeenSelected){
var tabContents=
React.createElement(StaticContainer,{shouldUpdate:this.props.selected},
children);

}else{
var tabContents=React.createElement(View,null);
}

return(
React.createElement(RCTTabBarItem,babelHelpers.extends({},
props,{
style:[styles.tab,style]}),
tabContents));


}}]);return TabBarItemIOS;}(React.Component),_class.propTypes=babelHelpers.extends({},ViewPropTypes,{/**
     * Little red bubble that sits at the top right of the icon.
     */badge:PropTypes.oneOfType([PropTypes.string,PropTypes.number]),/**
     * Background color for the badge. Available since iOS 10.
     */badgeColor:ColorPropType,/**
     * Items comes with a few predefined system icons. Note that if you are
     * using them, the title and selectedIcon will be overridden with the
     * system ones.
     */systemIcon:PropTypes.oneOf(['bookmarks','contacts','downloads','favorites','featured','history','more','most-recent','most-viewed','recents','search','top-rated']),/**
     * A custom icon for the tab. It is ignored when a system icon is defined.
     */icon:Image.propTypes.source,/**
     * A custom icon when the tab is selected. It is ignored when a system
     * icon is defined. If left empty, the icon will be tinted in blue.
     */selectedIcon:Image.propTypes.source,/**
     * Callback when this tab is being selected, you should change the state of your
     * component to set selected={true}.
     */onPress:PropTypes.func,/**
     * If set to true it renders the image as original,
     * it defaults to being displayed as a template
     */renderAsOriginal:PropTypes.bool,/**
     * It specifies whether the children are visible or not. If you see a
     * blank content, you probably forgot to add a selected one.
     */selected:PropTypes.bool,/**
     * React style object.
     */style:ViewPropTypes.style,/**
     * Text that appears under the icon. It is ignored when a system icon
     * is defined.
     */title:PropTypes.string,/**
     *(Apple TV only)* When set to true, this view will be focusable
     * and navigable using the Apple TV remote.
     *
     * @platform ios
     */isTVSelectable:PropTypes.bool}),_temp2);var styles=StyleSheet.create({tab:{position:'absolute',top:0,right:0,bottom:0,left:0}});var RCTTabBarItem=requireNativeComponent('RCTTabBarItem',TabBarItemIOS);module.exports=TabBarItemIOS;