var _propTypes=require("prop-types");var _propTypes2=babelHelpers.interopRequireDefault(_propTypes);
var _react=require("react");var _react2=babelHelpers.interopRequireDefault(_react);
var _reactNative=require("react-native");









var _MapMarker=require("./MapMarker");var _MapMarker2=babelHelpers.interopRequireDefault(_MapMarker);
var _MapPolyline=require("./MapPolyline");var _MapPolyline2=babelHelpers.interopRequireDefault(_MapPolyline);
var _MapPolygon=require("./MapPolygon");var _MapPolygon2=babelHelpers.interopRequireDefault(_MapPolygon);
var _MapCircle=require("./MapCircle");var _MapCircle2=babelHelpers.interopRequireDefault(_MapCircle);
var _MapCallout=require("./MapCallout");var _MapCallout2=babelHelpers.interopRequireDefault(_MapCallout);
var _MapUrlTile=require("./MapUrlTile");var _MapUrlTile2=babelHelpers.interopRequireDefault(_MapUrlTile);
var _AnimatedRegion=require("./AnimatedRegion");var _AnimatedRegion2=babelHelpers.interopRequireDefault(_AnimatedRegion);
var _decorateMapComponent=require("./decorateMapComponent");





var _ProviderConstants=require("./ProviderConstants");var ProviderConstants=babelHelpers.interopRequireWildcard(_ProviderConstants);

var MAP_TYPES={
STANDARD:'standard',
SATELLITE:'satellite',
HYBRID:'hybrid',
TERRAIN:'terrain',
NONE:'none'};


var GOOGLE_MAPS_ONLY_TYPES=[
MAP_TYPES.TERRAIN,
MAP_TYPES.NONE];


var viewConfig={
uiViewClassName:'AIR<provider>Map',
validAttributes:{
region:true}};



var propTypes=babelHelpers.extends({},_reactNative.ViewPropTypes,{

/**
   * When provider is "google", we will use GoogleMaps.
   * Any value other than "google" will default to using
   * MapKit in iOS or GoogleMaps in android as the map provider.
   */
provider:_propTypes2.default.oneOf([
'google']),


/**
   * Used to style and layout the `MapView`.  See `StyleSheet.js` and
   * `ViewStylePropTypes.js` for more info.
   */
style:_reactNative.ViewPropTypes.style,

/**
   * A json object that describes the style of the map. This is transformed to a string
   * and saved in mayStyleString to be sent to android and ios
   * https://developers.google.com/maps/documentation/ios-sdk/styling#use_a_string_resource
   * https://developers.google.com/maps/documentation/android-api/styling
   */
customMapStyle:_propTypes2.default.array,

/**
   * A json string that describes the style of the map
   * https://developers.google.com/maps/documentation/ios-sdk/styling#use_a_string_resource
   * https://developers.google.com/maps/documentation/android-api/styling
   */
customMapStyleString:_propTypes2.default.string,

/**
   * If `true` the app will ask for the user's location.
   * Default value is `false`.
   *
   * **NOTE**: You need to add NSLocationWhenInUseUsageDescription key in
   * Info.plist to enable geolocation, otherwise it is going
   * to *fail silently*!
   */
showsUserLocation:_propTypes2.default.bool,

/**
   * The title of the annotation for current user location. This only works if
   * `showsUserLocation` is true.
   * There is a default value `My Location` set by MapView.
   *
   * @platform ios
   */
userLocationAnnotationTitle:_propTypes2.default.string,

/**
   * If `false` hide the button to move map to the current user's location.
   * Default value is `true`.
   *
   * @platform android
   */
showsMyLocationButton:_propTypes2.default.bool,

/**
   * If `true` the map will focus on the user's location. This only works if
   * `showsUserLocation` is true and the user has shared their location.
   * Default value is `false`.
   *
   * @platform ios
   */
followsUserLocation:_propTypes2.default.bool,

/**
   * If `false` points of interest won't be displayed on the map.
   * Default value is `true`.
   *
   */
showsPointsOfInterest:_propTypes2.default.bool,

/**
   * If `false` compass won't be displayed on the map.
   * Default value is `true`.
   *
   * @platform ios
   */
showsCompass:_propTypes2.default.bool,

/**
   * If `false` the user won't be able to pinch/zoom the map.
   * Default value is `true`.
   *
   */
zoomEnabled:_propTypes2.default.bool,

/**
   * If `false` the user won't be able to pinch/rotate the map.
   * Default value is `true`.
   *
   */
rotateEnabled:_propTypes2.default.bool,

/**
   * If `true` the map will be cached to an Image for performance
   * Default value is `false`.
   *
   */
cacheEnabled:_propTypes2.default.bool,

/**
   * If `true` the map will be showing a loading indicator
   * Default value is `false`.
   *
   */
loadingEnabled:_propTypes2.default.bool,

/**
   * Loading background color while generating map cache image or loading the map
   * Default color is light gray.
   *
   */
loadingBackgroundColor:_reactNative.ColorPropType,

/**
   * Loading indicator color while generating map cache image or loading the map
   * Default color is gray color for iOS, theme color for Android.
   *
   */
loadingIndicatorColor:_reactNative.ColorPropType,

/**
   * If `false` the user won't be able to change the map region being displayed.
   * Default value is `true`.
   *
   */
scrollEnabled:_propTypes2.default.bool,

/**
   * If `false` the user won't be able to adjust the cameraâ€™s pitch angle.
   * Default value is `true`.
   *
   */
pitchEnabled:_propTypes2.default.bool,

/**
   * If `false` will hide 'Navigate' and 'Open in Maps' buttons on marker press
   * Default value is `true`.
   *
   * @platform android
   */
toolbarEnabled:_propTypes2.default.bool,

/**
   * A Boolean indicating whether on marker press the map will move to the pressed marker
   * Default value is `true`
   *
   * @platform android
   */
moveOnMarkerPress:_propTypes2.default.bool,

/**
   * A Boolean indicating whether the map shows scale information.
   * Default value is `false`
   *
   */
showsScale:_propTypes2.default.bool,

/**
   * A Boolean indicating whether the map displays extruded building information.
   * Default value is `true`.
   */
showsBuildings:_propTypes2.default.bool,

/**
   * A Boolean value indicating whether the map displays traffic information.
   * Default value is `false`.
   */
showsTraffic:_propTypes2.default.bool,

/**
   * A Boolean indicating whether indoor maps should be enabled.
   * Default value is `false`
   *
   * @platform android
   */
showsIndoors:_propTypes2.default.bool,

/**
   * A Boolean indicating whether indoor level picker should be enabled.
   * Default value is `false`
   *
   * @platform android
   */
showsIndoorLevelPicker:_propTypes2.default.bool,

/**
   * The map type to be displayed.
   *
   * - standard: standard road map (default)
   * - satellite: satellite view
   * - hybrid: satellite view with roads and points of interest overlayed
   * - terrain: topographic view
   * - none: no base map
   */
mapType:_propTypes2.default.oneOf(Object.values(MAP_TYPES)),

/**
   * The region to be displayed by the map.
   *
   * The region is defined by the center coordinates and the span of
   * coordinates to display.
   */
region:_propTypes2.default.shape({
/**
     * Coordinates for the center of the map.
     */
latitude:_propTypes2.default.number.isRequired,
longitude:_propTypes2.default.number.isRequired,

/**
     * Difference between the minimun and the maximum latitude/longitude
     * to be displayed.
     */
latitudeDelta:_propTypes2.default.number.isRequired,
longitudeDelta:_propTypes2.default.number.isRequired}),


/**
   * The initial region to be displayed by the map.  Use this prop instead of `region`
   * only if you don't want to control the viewport of the map besides the initial region.
   *
   * Changing this prop after the component has mounted will not result in a region change.
   *
   * This is similar to the `initialValue` prop of a text input.
   */
initialRegion:_propTypes2.default.shape({
/**
     * Coordinates for the center of the map.
     */
latitude:_propTypes2.default.number.isRequired,
longitude:_propTypes2.default.number.isRequired,

/**
     * Difference between the minimun and the maximum latitude/longitude
     * to be displayed.
     */
latitudeDelta:_propTypes2.default.number.isRequired,
longitudeDelta:_propTypes2.default.number.isRequired}),


/**
   * A Boolean indicating whether to use liteMode for android
   * Default value is `false`
   *
   * @platform android
   */
liteMode:_propTypes2.default.bool,

/**
   * Maximum size of area that can be displayed.
   *
   * @platform ios
   */
maxDelta:_propTypes2.default.number,

/**
   * Minimum size of area that can be displayed.
   *
   * @platform ios
   */
minDelta:_propTypes2.default.number,

/**
   * Insets for the map's legal label, originally at bottom left of the map.
   * See `EdgeInsetsPropType.js` for more information.
   */
legalLabelInsets:_reactNative.EdgeInsetsPropType,

/**
   * Callback that is called continuously when the user is dragging the map.
   */
onRegionChange:_propTypes2.default.func,

/**
   * Callback that is called once, when the user is done moving the map.
   */
onRegionChangeComplete:_propTypes2.default.func,

/**
   * Callback that is called when user taps on the map.
   */
onPress:_propTypes2.default.func,

/**
   * Callback that is called when user makes a "long press" somewhere on the map.
   */
onLongPress:_propTypes2.default.func,

/**
   * Callback that is called when user makes a "drag" somewhere on the map
   */
onPanDrag:_propTypes2.default.func,

/**
   * Callback that is called when a marker on the map is tapped by the user.
   */
onMarkerPress:_propTypes2.default.func,

/**
   * Callback that is called when a marker on the map becomes selected. This will be called when
   * the callout for that marker is about to be shown.
   *
   * @platform ios
   */
onMarkerSelect:_propTypes2.default.func,

/**
   * Callback that is called when a marker on the map becomes deselected. This will be called when
   * the callout for that marker is about to be hidden.
   *
   * @platform ios
   */
onMarkerDeselect:_propTypes2.default.func,

/**
   * Callback that is called when a callout is tapped by the user.
   */
onCalloutPress:_propTypes2.default.func,

/**
   * Callback that is called when the user initiates a drag on a marker (if it is draggable)
   */
onMarkerDragStart:_propTypes2.default.func,

/**
   * Callback called continuously as a marker is dragged
   */
onMarkerDrag:_propTypes2.default.func,

/**
   * Callback that is called when a drag on a marker finishes. This is usually the point you
   * will want to setState on the marker's coordinate again
   */
onMarkerDragEnd:_propTypes2.default.func});var



MapView=function(_React$Component){babelHelpers.inherits(MapView,_React$Component);
function MapView(props){babelHelpers.classCallCheck(this,MapView);var _this=babelHelpers.possibleConstructorReturn(this,(MapView.__proto__||Object.getPrototypeOf(MapView)).call(this,
props));

_this.state={
isReady:_reactNative.Platform.OS==='ios'};


_this._onMapReady=_this._onMapReady.bind(_this);
_this._onChange=_this._onChange.bind(_this);
_this._onLayout=_this._onLayout.bind(_this);return _this;
}babelHelpers.createClass(MapView,[{key:"getChildContext",value:function getChildContext()

{
return{provider:this.props.provider};
}},{key:"componentWillUpdate",value:function componentWillUpdate(

nextProps){
var a=this.__lastRegion;
var b=nextProps.region;
if(!a||!b)return;
if(
a.latitude!==b.latitude||
a.longitude!==b.longitude||
a.latitudeDelta!==b.latitudeDelta||
a.longitudeDelta!==b.longitudeDelta)
{
this.map.setNativeProps({region:b});
}
}},{key:"componentDidMount",value:function componentDidMount()

{var
isReady=this.state.isReady;
if(isReady){
this._updateStyle();
}
}},{key:"_updateStyle",value:function _updateStyle()

{var
customMapStyle=this.props.customMapStyle;
this.map.setNativeProps({customMapStyleString:JSON.stringify(customMapStyle)});
}},{key:"_onMapReady",value:function _onMapReady()

{var _props=
this.props,region=_props.region,initialRegion=_props.initialRegion;
if(region){
this.map.setNativeProps({region:region});
}else if(initialRegion){
this.map.setNativeProps({region:initialRegion});
}
this._updateStyle();
this.setState({isReady:true});
}},{key:"_onLayout",value:function _onLayout(

e){var
layout=e.nativeEvent.layout;
if(!layout.width||!layout.height)return;
if(this.state.isReady&&!this.__layoutCalled){
var region=this.props.region||this.props.initialRegion;
if(region){
this.__layoutCalled=true;
this.map.setNativeProps({region:region});
}
}
if(this.props.onLayout){
this.props.onLayout(e);
}
}},{key:"_onChange",value:function _onChange(

event){
this.__lastRegion=event.nativeEvent.region;
if(event.nativeEvent.continuous){
if(this.props.onRegionChange){
this.props.onRegionChange(event.nativeEvent.region);
}
}else if(this.props.onRegionChangeComplete){
this.props.onRegionChangeComplete(event.nativeEvent.region);
}
}},{key:"animateToRegion",value:function animateToRegion(

region,duration){
this._runCommand('animateToRegion',[region,duration||500]);
}},{key:"animateToCoordinate",value:function animateToCoordinate(

latLng,duration){
this._runCommand('animateToCoordinate',[latLng,duration||500]);
}},{key:"fitToElements",value:function fitToElements(

animated){
this._runCommand('fitToElements',[animated]);
}},{key:"fitToSuppliedMarkers",value:function fitToSuppliedMarkers(

markers,animated){
this._runCommand('fitToSuppliedMarkers',[markers,animated]);
}},{key:"fitToCoordinates",value:function fitToCoordinates()

{var coordinates=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var options=arguments[1];var _options$edgePadding=



options.edgePadding,edgePadding=_options$edgePadding===undefined?{top:0,right:0,bottom:0,left:0}:_options$edgePadding,_options$animated=options.animated,animated=_options$animated===undefined?true:_options$animated;

this._runCommand('fitToCoordinates',[coordinates,edgePadding,animated]);
}

/**
   * Takes a snapshot of the map and saves it to a picture
   * file or returns the image as a base64 encoded string.
   *
   * @param config Configuration options
   * @param [config.width] Width of the rendered map-view (when omitted actual view width is used).
   * @param [config.height] Height of the rendered map-view (when omitted actual height is used).
   * @param [config.region] Region to render (Only supported on iOS).
   * @param [config.format] Encoding format ('png', 'jpg') (default: 'png').
   * @param [config.quality] Compression quality (only used for jpg) (default: 1.0).
   * @param [config.result] Result format ('file', 'base64') (default: 'file').
   *
   * @return Promise Promise with either the file-uri or base64 encoded string
   */},{key:"takeSnapshot",value:function takeSnapshot(
args){var _this2=this;
// For the time being we support the legacy API on iOS.
// This will be removed in a future release and only the
// new Promise style API shall be supported.
if(_reactNative.Platform.OS==='ios'&&arguments.length===4){
console.warn('Old takeSnapshot API has been deprecated; will be removed in the near future');//eslint-disable-line
var width=arguments[0];// eslint-disable-line
var height=arguments[1];// eslint-disable-line
var region=arguments[2];// eslint-disable-line
var callback=arguments[3];// eslint-disable-line
this._runCommand('takeSnapshot',[
width||0,
height||0,
region||{},
'png',
1,
'legacy',
callback]);

return undefined;
}

// Sanitize inputs
var config={
width:args.width||0,
height:args.height||0,
region:args.region||{},
format:args.format||'png',
quality:args.quality||1.0,
result:args.result||'file'};

if(config.format!=='png'&&
config.format!=='jpg')throw new Error('Invalid format specified');
if(config.result!=='file'&&
config.result!=='base64')throw new Error('Invalid result specified');

// Call native function
if(_reactNative.Platform.OS==='android'){
return _reactNative.NativeModules.AirMapModule.takeSnapshot(this._getHandle(),config);
}else if(_reactNative.Platform.OS==='ios'){
return new Promise(function(resolve,reject){
_this2._runCommand('takeSnapshot',[
config.width,
config.height,
config.region,
config.format,
config.quality,
config.result,
function(err,snapshot){
if(err){
reject(err);
}else{
resolve(snapshot);
}
}]);

});
}
return Promise.reject('takeSnapshot not supported on this platform');
}},{key:"_uiManagerCommand",value:function _uiManagerCommand(

name){
return _reactNative.NativeModules.UIManager[(0,_decorateMapComponent.getAirMapName)(this.props.provider)].Commands[name];
}},{key:"_mapManagerCommand",value:function _mapManagerCommand(

name){
return _reactNative.NativeModules[(0,_decorateMapComponent.getAirMapName)(this.props.provider)+"Manager"][name];
}},{key:"_getHandle",value:function _getHandle()

{
return(0,_reactNative.findNodeHandle)(this.map);
}},{key:"_runCommand",value:function _runCommand(

name,args){
switch(_reactNative.Platform.OS){
case'android':
_reactNative.NativeModules.UIManager.dispatchViewManagerCommand(
this._getHandle(),
this._uiManagerCommand(name),
args);

break;

case'ios':
this._mapManagerCommand(name).apply(undefined,[this._getHandle()].concat(babelHelpers.toConsumableArray(args)));
break;

default:
break;}

}},{key:"render",value:function render()

{var _this3=this;
var props=void 0;

if(this.state.isReady){
props=babelHelpers.extends({},
this.props,{
region:null,
initialRegion:null,
onChange:this._onChange,
onMapReady:this._onMapReady,
onLayout:this._onLayout});

if(_reactNative.Platform.OS==='ios'&&props.provider===ProviderConstants.PROVIDER_DEFAULT&&
GOOGLE_MAPS_ONLY_TYPES.includes(props.mapType)){
props.mapType=MAP_TYPES.standard;
}
props.handlePanDrag=!!props.onPanDrag;
}else{
props={
style:this.props.style,
region:null,
initialRegion:null,
onChange:this._onChange,
onMapReady:this._onMapReady,
onLayout:this._onLayout};

}

if(_reactNative.Platform.OS==='android'&&this.props.liteMode){
return(
_react2.default.createElement(AIRMapLite,babelHelpers.extends({
ref:function ref(_ref){_this3.map=_ref;}},
props)));


}

var AIRMap=getAirMapComponent(this.props.provider);

return(
_react2.default.createElement(AIRMap,babelHelpers.extends({
ref:function ref(_ref2){_this3.map=_ref2;}},
props)));


}}]);return MapView;}(_react2.default.Component);


MapView.propTypes=propTypes;
MapView.viewConfig=viewConfig;
MapView.childContextTypes=_decorateMapComponent.contextTypes;

MapView.MAP_TYPES=MAP_TYPES;

var nativeComponent=function nativeComponent(Component){return(0,_reactNative.requireNativeComponent)(Component,MapView,{
nativeOnly:{
onChange:true,
onMapReady:true,
handlePanDrag:true}});};


var airMaps={
default:nativeComponent('AIRMap')};

if(_reactNative.Platform.OS==='android'){
airMaps.google=airMaps.default;
}else{
airMaps.google=_decorateMapComponent.googleMapIsInstalled?nativeComponent('AIRGoogleMap'):
(0,_decorateMapComponent.createNotSupportedComponent)('react-native-maps: AirGoogleMaps dir must be added to your xCode project to support GoogleMaps on iOS.');// eslint-disable-line max-len
}
var getAirMapComponent=function getAirMapComponent(provider){return airMaps[provider||'default'];};

var AIRMapLite=_reactNative.NativeModules.UIManager.AIRMapLite&&
(0,_reactNative.requireNativeComponent)('AIRMapLite',MapView,{
nativeOnly:{
onChange:true,
onMapReady:true,
handlePanDrag:true}});



MapView.Marker=_MapMarker2.default;
MapView.Polyline=_MapPolyline2.default;
MapView.Polygon=_MapPolygon2.default;
MapView.Circle=_MapCircle2.default;
MapView.UrlTile=_MapUrlTile2.default;
MapView.Callout=_MapCallout2.default;
babelHelpers.extends(MapView,ProviderConstants);
MapView.ProviderPropType=_propTypes2.default.oneOf(Object.values(ProviderConstants));

MapView.Animated=_reactNative.Animated.createAnimatedComponent(MapView);
MapView.AnimatedRegion=_AnimatedRegion2.default;

module.exports=MapView;